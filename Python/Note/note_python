# Data Types and variables (Assigning)
    -> Data Types
            int = 0 , 1, ... numbers
            string = "string",'one',"1"
            bool = true or false
            float = 0.1, 0.4, ... n.numbers  

        Types Data in Python 
            - numbers
            - Strings
            - tuple 
            - list
            - Dictionary
            
    -> variables
            name = "name"
            print (name)
            or
            print ("your name is" + str(name))

    -> initializing variable directly
            a = 5
            
            # printing value of a
            print ("The value of a is: " + str(a))

    -> Initializing variables using Conditional Operator
            a = 1 if 20 > 10 else 0
            
            # Printing value of a
            print("The value of a is: " , str(a))

# Inputs and Outputs 
    ->  input ( prompt )
        print(output)
        or
        print("Whats your name? ")
        name = input()
        print("hi", name)

        val = input("What is your name? ") // input
        print ("Your Name is cool "+ str(val)) // output


        NOTE:
            input() converts the input into a string so to convert to a int
                x = input("Enter Number One: ")
                y = input("Enter Number Two: ")          

                print("Type of x:" ,type(x))
                x = int(x) 
                y = int(y)    

                z = x + y

                print("Type of x:" ,type(x))      
                print ("Sum: " , z)

# Operators 
        +
        -
        *
        /
        ** -> exponential
        // -> integer division 64 // 10 = 6 floor division results a whole number adjusted to the left
        %  -> reminder 64 // 10 = 4

# Flow (nested & chain)
    Conditions 
        -> (>, >=, <, <=, ==, !=)

    -> if
        if condition:
            statement1
        statement2

        # Here if the condition is true, if block 
        # will consider only statement1 to be inside 
        # its block.


    -> if-else
        if (condition):
            # Executes this block if
            # condition is true
        else:
            # Executes this block if
            # condition is false
        
    -> if-elif-else ladder
        if (condition):
            statement
        elif (condition):
            statement
        .
        .
        else:
            statement

            example::
                    height = input("Enter Your Height pls (meters 1.00 format): ")
                    x = float(height)

                    if x >= 1.88:
                        print("Sorry your too tall. good for the ladies tho")
                    elif x >= 1.55 and x <= 1.87:
                        print ("Have a great time.")
                    elif x > 0 and x <= 1.54:
                        print("Sorry to short. maybe read those books")
                    else:
                        print("No service")
    -> or, and, not

# Loops
    -> For Loops
        Note: In Python, for loops only implements the collection-based iteration.    
        
        for <variable> in range(start,stop,step):
            <expression>
            <expression>
            
        for x in range(start, stop, step): -> start, condition, update
            print(x)
        NOTE: 
            by default the range can take a single number and tha will be the 
            STOP condition the START will be 0 and the STEP will be 1
        
                -> For Loop using List, Dictionary, String
                        # Iterating over a list
                            print("List Iteration")
                            l = ["geeks", "for", "geeks"]
                            for i in l:
                                print(i)
                        
                        # Iterating over a tuple (immutable)
                            print("\nTuple Iteration")
                            t = ("geeks", "for", "geeks")
                            for i in t:
                                print(i)
                            
                        # Iterating over a String
                            print("\nString Iteration")
                            s = "Geeks"
                            for i in s:
                                print(i)
                        
                        # Iterating over dictionary
                        print("\nDictionary Iteration")
                            d = dict()
                            d['xyz'] = 123
                            d['abc'] = 345
                            for i in d:
                                print("% s % d" % (i, d[i]))

    -> While Loops

            while expression:
                statement(s)

        Example

            count = 0
            while (count < 3):
                count = count + 1
                print("Hello Man")

        # Single statement while block
            count = 0
            while (count < 5): count += 1; print("Hello Man")

        -> While loop with else

            # while-else loop
                i = 0
                while i < 4:
                    i += 1
                    print(i)
                else:  # Executed because no break in for
                    print("No Break\n")
                
                i = 0
                while i < 4:
                    i += 1
                    print(i)
                    break
                else:  # Not executed as there is a break
                    print("No Break")





    -> ## Loop Control Statements

        Continue Statement
            Note: Python Continue Statement returns the control to the beginning 
                  of the loop.

                Example
                    # Prints all letters except 'e' and 's'
                        i = 0
                        a = 'Yonatanafewerk's'
                        
                        while i < len(a):
                            if a[i] == 'e' or a[i] == 's':
                                i += 1
                                continue
                                
                            print('Current Letter :', a[i])
                            i += 1

        Break Statement
            Note: Python Break Statement brings control out of the loop.

        Pass Statement
            Note: Pass is also used for empty control statements, 
                  functions, and classes.

# Lists and how to work with them 

# Strings 

        String formatting 
            num = 6
            str = "i have {} Books!" . format(num)
            print(str)
            
        common string Operators (For a = hello and b = world)
            concatenation       a + b
            Repetition          a*amount_in_number
            slice               a[1] -> e
            Range Slice         b[1:3] -> takes the cha from index value 1 - 3
            Membership          [r]

# File Handling 

# Modular Programming 

# Error handling 

# Global n Local variables 







ðŸ“˜ Intermediate Python ðŸ“˜
# OOP
    - creating classes 
    - Inheritance
    - Overloading methods
    - Static and class methods 
    - Private and public classes 

# Optional Parameters
# Static and Class Methods
# Map Function
# Filter Function
# Lambda Function
# Introduction to Collections
# Named Tuple
# Deque

ðŸ“™ Advanced Python ðŸ“™
# Overview of Python
# Dunder/Magic Methods
# Metaclasses
# Decorators
# Generators
# Context Managers