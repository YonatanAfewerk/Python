#  (Function) 

    Function -> Arguments -> side effect
    
    
    
    print(object(s), separator=separator, end=end, file=file, flush=flush) 

# Data Types and variables (Assigning)
    -> Data Types
            int = 0 , 1, ... numbers
            string = "string",'one',"1"
            bool = true or false
            float = 0.1, 0.4, ... n.numbers  

        Types Data in Python 
            - numbers
            - Strings
            - tuple 
            - list
            - Dictionary
            
    -> variables
            name = "name"
            print (name)
            or
            print ("your name is" + str(name))

    -> initializing variable directly
            a = 5
            
            # printing value of a
            print ("The value of a is: " + str(a))

    -> Initializing variables using Conditional Operator
            a = 1 if 20 > 10 else 0
            
            # Printing value of a
            print("The value of a is: " , str(a))

# Inputs and Outputs 
    ->  input ( prompt )
        print(output)
        or
        print("Whats your name? ")
        name = input()
        print("hi", name)

        val = input("What is your name? ") // input
        print ("Your Name is cool "+ str(val)) // output


        NOTE:
            input() converts the input into a string so to convert to a int
                x = input("Enter Number One: ")
                y = input("Enter Number Two: ")          

                print("Type of x:" ,type(x))
                x = int(x) 
                y = int(y)    

                z = x + y

                print("Type of x:" ,type(x))      
                print ("Sum: " , z)
  
# Operators 
        +
        -
        *
        /
        ** -> exponential
        // -> integer division 64 // 10 = 6 floor division results a whole number adjusted to the left
        %  -> reminder 64 // 10 = 4

    -> Membership Operator

        - in 	
            Returns True if a sequence with the specified 
            value is present in the object	x in y	
            
                Eg. 
                    x = ["apple", "banana"]

                    print("banana" in x)

            
        - not in	
            Returns True if a sequence with the specified
            value is not present in the object	x not in y
            
                Eg.
                    x = ["apple", "banana"]

                    print("pineapple" not in x)

# Flow (nested & chain) Conditionals 
    Conditions 
        -> (>, >=, <, <=, ==, !=)

    -> if
        if condition:
            statement1
        statement2

        # Here if the condition is true, if block 
        # will consider only statement1 to be inside 
        # its block.


    -> if-else
        if (condition):
            # Executes this block if
            # condition is true
        else:
            # Executes this block if
            # condition is false
        
    -> if-elif-else ladder
        if (condition):
            statement
        elif (condition):
            statement
        .
        .
        else:
            statement

            example::
                    height = input("Enter Your Height pls (meters 1.00 format): ")
                    x = float(height)

                    if x >= 1.88:
                        print("Sorry your too tall. good for the ladies tho")
                    elif x >= 1.55 and x <= 1.87:
                        print ("Have a great time.")
                    elif x > 0 and x <= 1.54:
                        print("Sorry to short. maybe read those books")
                    else:
                        print("No service")
    -> or, and, not

    # Demonstrates chained comparisons

    score = int(int("score: "))

    if 90 <= score <= 100:
        print("A")
    elif 80 <= score <= 90:
        print("B")
    else:
        print("F")    
        
    # Demonstrates fewer comparisons
    
    if score >= 90:
        print("A")
    elif score >= 80:
        print("B")
    else:
        print("F")    
        
# Loops
    -> For Loops
        Note: In Python, for loops only implements the collection-based iteration.    
        
        for <variable> in range(start,stop,step):
            <expression>
            <expression>
            
        for x in range(start, stop, step): -> start, condition, update
            print(x)
        NOTE: 
            by default the range can take a single number and tha will be the 
            STOP condition the START will be 0 and the STEP will be 1
        
                -> For Loop using List, Dictionary, String
                        # Iterating over a list
                            print("List Iteration")
                            l = ["geeks", "for", "geeks"]
                            for i in l:
                                print(i)
                        
                        # Iterating over a tuple (immutable)
                            print("\nTuple Iteration")
                            t = ("geeks", "for", "geeks")
                            for i in t:
                                print(i)
                            
                        # Iterating over a String
                            print("\nString Iteration")
                            s = "Geeks"
                            for i in s:
                                print(i)
                        
                        # Iterating over dictionary
                        print("\nDictionary Iteration")
                            d = dict()
                            d['xyz'] = 123
                            d['abc'] = 345
                            for i in d:
                                print("% s % d" % (i, d[i]))

    -> While Loops

            while expression:
                statement(s)

        Example

            count = 0
            while (count < 3):
                count = count + 1
                print("Hello Man")

        # Single statement while block
            count = 0
            while (count < 5): count += 1; print("Hello Man")

        -> While loop with else

            # while-else loop
                i = 0
                while i < 4:
                    i += 1
                    print(i)
                else:  # Executed because no break in for
                    print("No Break\n")
                
                i = 0
                while i < 4:
                    i += 1
                    print(i)
                    break
                else:  # Not executed as there is a break
                    print("No Break")





    -> ## Loop Control Statements

        Continue Statement
            Note: Python Continue Statement returns the control to the beginning 
                  of the loop.

                Example
                    # Prints all letters except 'e' and 's'
                        i = 0
                        a = 'Yonatanafewerk's'
                        
                        while i < len(a):
                            if a[i] == 'e' or a[i] == 's':
                                i += 1
                                continue
                                
                            print('Current Letter :', a[i])
                            i += 1

        Break Statement
            Note: Python Break Statement brings control out of the loop.

        Pass Statement
            Note: Pass is also used for empty control statements, 
                  functions, and classes.

# Lists, Tuples and how to work with them 

        -> Lists are just like dynamically sized arrays amd are indexed 0-n
        
            NOTE: Lists need not be homogeneous always which makes it the most powerful 
            tool in Python. A single list may contain DataTypes like Integers, Strings, 
            as well as Objects. Lists are mutable, and hence, they can be altered even 
            after their creation.
            
        # (Having duplicate values)
            List = [1, 2, 4, 4, 3, 3, 3, 6, 5]
            
        # mixed type of values
        # (Having numbers and strings)
            List = [1, 2, 'Geeks', 4, 'For', 6, 'Geeks']
            
            -> How to find the size of the list?
                    - len(list_name)
                    
                    Eg. 
                        fruits = ["orange", "apple", "banana", "lemon", 22022]

                        print(len(fruits))

                        for i in range(len(fruits)):
                            print(fruits[i])
                            
            -> Using append() method
            Elements can be added to the List by using the built-in append() function. Only one 
            element at a time can be added to the list by using the append() method, for the addition
            of multiple elements with the append() method, loops are used

                        fruits.append('Mango')
                        fruits.append('Jelbo')
                        fruits.append('Pineapple')

                            
            -> Using insert() method
            insert() method is used. Unlike append() which takes only one argument, the insert()
            method requires two arguments(position, value).

                        fruits.insert(0, 'Pine')
                        fruits.insert(1, 'Papaye')
            -> Using extend() method
            extend(), this method is used to add multiple elements at the same time at the 
            end of the list.

                        fruits.extend(['one', 'two', 'three'])
                
            -> Accessing elements from the List
            In order to access the list items refer to the index number. Use the index operator [ ] 
            to access an item in a list. The index must be an integer. Nested lists are accessed 
            using nested indexing.    
                    -> iteration by item
                        for i in fruits
                            print(i)
                              
                    -> Negative indexing  
                        Instead of having to compute the offset as in List[len(List)-3], it is enough
                        to just write List[-3]. Negative indexing means beginning from the end, -1 
                        refers to the last item, -2 refers to the second-last item, etc.
                        
                        for i in range(len(fruits)):
                            print(fruits[-i])
                            
            -> Using remove() method
            Elements can be removed from the List by using the built-in remove() function but an 
            Error arises if the element doesn’t exist in the list.
            
            -> Using pop() method
            Pop() function can also be used to remove and return an element from the list, but by 
            default it removes only the last element of the list, to remove an element from a 
            specific position of the List, the index of the element is passed as an argument to 
            the pop() method
                        fruits.pop()    # default removing of the last element of the list

                        for i in range(1,6):
                            fruits.pop(i)   # specified position of the element are removed
                  
# Strings 

         Note:
            #string concatenation (putting strings togthere can be done in different ways)
            
            engineer = "" #some string assigned to the variable
            
            # a few ways to do it
            print("Is your name engineer " + engineer) 
            print("Is your name engineer {}".format(engineer))
            print(f"Is your name engineer {engineer}")

        String formatting 
            num = 6
            str = "i have {} Books!" . format(num)
            print(str)
            
        common string Operators (For a = hello and b = world)
            concatenation       a + b
            Repetition          a*amount_in_number
            slice               a[1] -> e
            Range Slice         b[1:3] -> takes the cha from index value 1 - 3
                                b[start:stop:step]
            Insert slice        b[1:2] = 'Added'    # on to lists
            Membership          [r]

        -> string methods
                name = '  Yonatan Afewerk  '
                name2 = "   Yonatan afewerk teshome  ".strip().title()
                name3 = input("  hello, world!   ").title().strip()

                strip()
                    It Removes every space before and after the string 
                    print(name.strip()) #output     - Yonatan Afewerk
                    
                len() 
                    It gives you length of the string
                    print(len(name))   #output      - 19 
                    
                split()
                    Takes a delimiter and splits the string starting from it
                    print(name.split('o')) #output  - ['  Y', 'natan Afewerk  ']

                    NOTE: Default on split() is a 'space'
                title()
                capitalize()
                
                replace("oldvalue", "newvalue")

# File Handling 

# Modular Programming 
    ->  is a block of related statements designed to perform a computational, 
        logical, or evaluative task. 
        
            How do you create a function
                def function_name(parameters):
                    """docstring"""
                    statement(s)
                    return expression
                    
                Eg.
                    # defining a function
                    def fun():
                        print("Fun function")
                    
                    #calling a function 
                    fun()
                    
                    # defining a function
                    def evenOdd(x):
                        if (x % 2 == 0):
                            print("even")
                        else:
                            print("odd")
 
                    # Driver code to call the function
                    evenOdd(2)
                    evenOdd(3)
            
            How to structure functions 
                eg.
                 
                Type 1
                        define a function 
                        call a function 
                Type 2
                        def main() function to drive the user defind functions
                        def user() functions second
                        call main()
                            
                            Eg.
                                #defining a main()
                                def main():
                                    odd_even(4)
                                    odd_even(5)
                                #defining the users function
                                def odd_even(x):
                                    if (x % 2 == 0):
                                        print("Even!")
                                    elif (x % 2 == 1):
                                        print("Odd!")
                                    else:
                                        print("Zero!")
                                # calling the main function
                                main()
                        
                                    
    ->  Types of Arguments    

            Default arguments
                    A default argument is a parameter that assumes a default value 
                    if a value is not provided in the function call 
                    for that argument.

            Keyword arguments
                    The idea is to allow the caller to specify the argument name 
                    with values so that caller does not need to remember the 
                    order of parameters.

            Docstring
                    first string after the function is called the Document string or 
                    Docstring in short. This is used to describe the functionality 
                    of the function.

            The return statement
                    def square_value(num):
                        """This function returns the square
                        value of the entered number"""
                        return num**2


                    print(square_value(2))
                    print(square_value(-4))

# Error handling 

# Global n Local variables 







📘 Intermediate Python 📘
# OOP
    - creating classes 
    - Inheritance
    - Overloading methods
    - Static and class methods 
    - Private and public classes 

# Optional Parameters
# Static and Class Methods
# Map Function
# Filter Function
# Lambda Function
# Introduction to Collections
# Named Tuple
# Deque

📙 Advanced Python 📙
# Overview of Python
# Dunder/Magic Methods
# Metaclasses
# Decorators
# Generators
# Context Managers